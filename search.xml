<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BigDecimal和数字类型转换</title>
    <url>/2021/06/01/BigDecimal%E5%92%8C%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h1><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">四则运算</span><br><span class="line">BigDecimal b1 = <span class="keyword">new</span> <span class="constructor">BigDecimal(Double.<span class="params">toString</span>(<span class="params">v1</span>)</span>);  </span><br><span class="line">BigDecimal b2 = <span class="keyword">new</span> <span class="constructor">BigDecimal(Double.<span class="params">toString</span>(<span class="params">v2</span>)</span>);  </span><br><span class="line">BigDecimal b3 = b1.add(b2);<span class="comment">//b1+b2</span></span><br><span class="line">BigDecimal b3 = b1.subtract(b2);<span class="comment">//b1-b2</span></span><br><span class="line">BigDecimal b3 = b1.multiply(b2);<span class="comment">//b1*b2</span></span><br><span class="line">BigDecimal b3 = b1.divide(b2,scale,BigDecimal.ROUND_HALF_UP);<span class="comment">//b1/b2,精确到小数点后scale位,其余的四舍五入</span></span><br><span class="line">比较大小</span><br><span class="line"><span class="built_in">int</span> num = b1.compare<span class="constructor">To(<span class="params">b2</span>)</span>;<span class="comment">//num为负,b1&lt;b2、num为0,b1==b2、num为正,b1&gt;b2</span></span><br><span class="line">Int num=a.compare<span class="constructor">To(Integer <span class="params">anotherInteger</span>)</span>;</span><br><span class="line">Int num=a.compare<span class="constructor">To(BigDecimal <span class="params">anotherBigDecimal</span>)</span>;</span><br><span class="line">BigDecimal取其中最大、最小值、绝对值、相反数</span><br><span class="line">BigDecimal c = a.max (b) <span class="comment">//比较取最大值</span></span><br><span class="line">BigDecimal c = a.min(b) <span class="comment">//比较取最小值</span></span><br><span class="line">BigDecimal c = a.abs<span class="literal">()</span><span class="comment">//取最绝对值</span></span><br><span class="line">BigDecimal c = a.negate<span class="literal">()</span><span class="comment">//取相反数</span></span><br></pre></td></tr></table></figure>

<h1 id="数字类型转换"><a href="#数字类型转换" class="headerlink" title="数字类型转换"></a>数字类型转换</h1><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Integer a=<span class="keyword">new</span> <span class="constructor">Integer(<span class="params">int</span> <span class="params">value</span>)</span>; <span class="comment">//定义中将int型转换为Integer型</span></span><br><span class="line">Integer a=<span class="keyword">new</span> <span class="constructor">Integer(String <span class="params">value</span>)</span>;<span class="comment">//定义中将String型的转换为Integer型</span></span><br><span class="line">BigDecimal a=<span class="keyword">new</span> <span class="constructor">BigDecimal(String; <span class="params">val</span>)</span><span class="comment">//定义中将String型转换为Integer型</span></span><br><span class="line">BigDecimal a=<span class="keyword">new</span> <span class="constructor">BigDecimal(<span class="params">double</span> <span class="params">val</span>)</span>;<span class="comment">//定义中将double型转换为Integer型</span></span><br><span class="line">Integer a=<span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>value<span class="constructor">Of(<span class="string">&quot;7&quot;</span>)</span>;<span class="comment">//String类型转换为BigDecimal型</span></span><br><span class="line">Integer a=<span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>get<span class="constructor">Integer(<span class="string">&quot;7&quot;</span>)</span>;<span class="comment">//String类型转换为BigDecimal型</span></span><br><span class="line"><span class="built_in">int</span> b=<span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="string">&quot;7&quot;</span>)</span>;<span class="comment">//String类型转换为int型</span></span><br><span class="line"><span class="built_in">int</span> b=a.<span class="built_in">int</span><span class="constructor">Value()</span>;<span class="comment">//Integer类型转换为int型</span></span><br><span class="line"><span class="built_in">float</span> b=a.<span class="built_in">float</span><span class="constructor">Value()</span>;<span class="comment">//Integer类型转换为float型</span></span><br><span class="line">double b=a.double<span class="constructor">Value()</span>;<span class="comment">//Integer类型转换为double型</span></span><br><span class="line">long b=a.long<span class="constructor">Value()</span>;<span class="comment">//Integer类型转换为long型</span></span><br><span class="line">BigDecimal temp = <span class="keyword">new</span> <span class="constructor">BigDecimal(<span class="params">a</span>)</span>;<span class="comment">//Integer类型转换为BigDecimal类型</span></span><br><span class="line">其它类型转换为<span class="constructor">String(以Integer为例)</span></span><br><span class="line">String str=a.<span class="keyword">to</span><span class="constructor">String()</span>;</span><br><span class="line">String str=<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">a</span>)</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>函数</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>idea设置自动删除类中无用包</title>
    <url>/2021/05/19/IDEA%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%E7%B1%BB%E4%B8%AD%E6%97%A0%E7%94%A8%E5%8C%85/</url>
    <content><![CDATA[<p>File→Settings→Editor→General→Auto Import→Optimize imports on the fly</p>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON协议中的status总结</title>
    <url>/2021/04/25/JSON%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84status%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>[size=medium]一、状态码概况：[/size]</p>
<pre><code>0**：未被始化

1**：请求收到，继续处理

2**：操作成功收到，分析、接受

3**：完成此请求必须进一步处理

4**：请求包含一个错误语法或不能完成

5**：服务器执行一个完全有效请求失败
</code></pre>
<p>[size=medium]二、信息[/size]</p>
<pre><code>100——客户必须继续发出请求(Continue)

101——客户要求服务器根据请求转换HTTP协议版本(Switching protocols)
</code></pre>
<p>[size=medium]三、成功[/size]</p>
<pre><code>200——交易成功(OK)

201——提示知道新文件的URL(Created)

202——接受和处理、但处理未完成(Accepted)

203——返回信息不确定或不完整(Non-Authoritative Information)

204——请求收到，但返回信息为空(No Content)

205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件(Reset Content)

206——服务器已经完成了部分用户的GET请求(Partial Content)
</code></pre>
<p>[size=medium]四、重定向[/size]</p>
<pre><code>300——请求的资源可在多处得到(Multiple Choices)

301——删除请求数据(Moved Permanently)

302——在其他地址发现了请求数据(Found)

303——建议客户访问其他URL或访问方式(See Other)

304——客户端已经执行了GET，但文件未变化(Not Modified)

305——请求的资源必须从服务器指定的地址得到(Use Proxy)

306——前一版本HTTP中使用的代码，现行版本中不再使用

307——申明请求的资源临时性删除(Temporary Redirect)
</code></pre>
<p>[size=medium]五、客户端错误[/size]</p>
<pre><code>400——错误请求，如语法错误(Bad Request)

401——请求授权失败(Unauthorized)

402——保留有效ChargeTo头响应(Payment Required)

403——请求不允许(由于服务器上文件或目录的权限设置导致资源不可用)(Forbidden)

404——没有发现文件、查询或URl(没有找到指定的资源)(Not Found)

405——用户在Request-Line字段定义的方法不允许(Method Not Allowed)

406——根据用户发送的Accept拖，请求资源不可访问(Not Acceptable)

407——类似401，用户必须首先在代理服务器上得到授权(Proxy Authentication Required)

408——客户端没有在用户指定的饿时间内完成请求(Request Timeout)

409——对当前资源状态，请求不能完成(Conflict)

410——服务器上不再有此资源且无进一步的参考地址(Gone)

411——服务器拒绝用户定义的Content-Length属性请求(Length Required)

412——一个或多个请求头字段在当前请求中错误(Precondition Failed)

413——请求的资源大于服务器允许的大小(Request Entity Too Large)

414——请求的资源URL长于服务器允许的长度(Request-URI Too Long)

415——请求资源不支持请求项目格式(Unsupported Media Type)

416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段(Requested Range Not Suitable)

417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求(Expectation Failed)
</code></pre>
<p>[size=medium]六、服务端错误[/size]</p>
<pre><code>500——服务器产生内部错误(Internal Server Error)

501——服务器不支持请求的函数(Not Implemented)

502——服务器暂时不可用，有时是为了防止发生系统过载(Bad Gateway)

503——服务器过载或暂停维修(Service Unavailable)

504——关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长(Gateway Timeout)

505——服务器不支持或拒绝支请求头中指定的HTTP版本(HTTP Version Not Supported )
</code></pre>
<p>[size=medium]七、除以上的其他[/size]</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">6</span>** <span class="number">7</span>** <span class="number">8</span>** <span class="number">9</span>** 等可以自己根据需求自定义</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>IDEA 报Error java 找不到符号 符号变量log 位置</title>
    <url>/2021/05/19/Lombok/</url>
    <content><![CDATA[<p>原因：使用@Slf4j或者@Log4j2注解方式记录日志。但是使用注解方式，就要往该项目中引入lombok插件，所以可能是lombok插件出错</p>
<p>介绍两种较少见的情况</p>
<p>一、</p>
<p>点击setting → Build，Execution，Deployment  → Annotation Processors打开编辑页面，勾选Enable annotation processing，Apply保存后重启IDEA</p>
<p>二、查看警告信息是否有如下（不要只看错误信息）</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="symbol">ava:</span> You aren<span class="comment">&#x27;t using a compiler supported by lombok, so lombok will not work and has been disabled.</span></span><br><span class="line">Your processor <span class="built_in">is</span>: com.sun.proxy.$Proxy24</span><br><span class="line">Lombok supports: sun/apple javac <span class="number">1.6</span>, ECJ</span><br></pre></td></tr></table></figure>

<p>有的话表示编译器与lombok版本不匹配，可以选择更换编译器或者更换lombok版本</p>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>博客编写规则</title>
    <url>/2021/04/10/hello-world/</url>
    <content><![CDATA[<p>title: Hello World<br>date: 2017-03-11 23:54:11<br>tags: [Hello,测试]<br>categories: 测试</p>
<p>“&lt; !– more –&gt;”阅读全文</p>
<p>top: 2  置顶功能数字越大，优先级越高</p>
<p><img src="/2021/04/10/hello-world/alipay.png" alt="测试4"> 添加图片</p>
]]></content>
  </entry>
  <entry>
    <title>MySQL DATE_FORMAT() 函数</title>
    <url>/2021/04/12/MySQL%20DATE_FORMAT()%20%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="constructor">DATE_FORMAT()</span> 函数用于以不同的格式显示日期/时间数据。</span><br><span class="line">语法：<span class="constructor">DATE_FORMAT(<span class="params">date</span>,<span class="params">format</span>)</span>  *date* 参数是合法的日期。*format* 规定日期/时间的输出格式。</span><br><span class="line">date<span class="constructor">_format(<span class="params">a</span>.P_SDATE,&#x27;%Y-%<span class="params">m</span>-%<span class="params">d</span>&#x27;)</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">格式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%a</td>
<td align="left">缩写星期名</td>
</tr>
<tr>
<td align="left">%b</td>
<td align="left">缩写月名</td>
</tr>
<tr>
<td align="left">%c</td>
<td align="left">月，数值</td>
</tr>
<tr>
<td align="left">%D</td>
<td align="left">带有英文前缀的月中的天</td>
</tr>
<tr>
<td align="left">%d</td>
<td align="left">月的天，数值(00-31)</td>
</tr>
<tr>
<td align="left">%e</td>
<td align="left">月的天，数值(0-31)</td>
</tr>
<tr>
<td align="left">%f</td>
<td align="left">微秒</td>
</tr>
<tr>
<td align="left">%H</td>
<td align="left">小时 (00-23)</td>
</tr>
<tr>
<td align="left">%h</td>
<td align="left">小时 (01-12)</td>
</tr>
<tr>
<td align="left">%I</td>
<td align="left">小时 (01-12)</td>
</tr>
<tr>
<td align="left">%i</td>
<td align="left">分钟，数值(00-59)</td>
</tr>
<tr>
<td align="left">%j</td>
<td align="left">年的天 (001-366)</td>
</tr>
<tr>
<td align="left">%k</td>
<td align="left">小时 (0-23)</td>
</tr>
<tr>
<td align="left">%l</td>
<td align="left">小时 (1-12)</td>
</tr>
<tr>
<td align="left">%M</td>
<td align="left">月名</td>
</tr>
<tr>
<td align="left">%m</td>
<td align="left">月，数值(00-12)</td>
</tr>
<tr>
<td align="left">%p</td>
<td align="left">AM 或 PM</td>
</tr>
<tr>
<td align="left">%r</td>
<td align="left">时间，12-小时（hh:mm:ss AM 或 PM）</td>
</tr>
<tr>
<td align="left">%S</td>
<td align="left">秒(00-59)</td>
</tr>
<tr>
<td align="left">%s</td>
<td align="left">秒(00-59)</td>
</tr>
<tr>
<td align="left">%T</td>
<td align="left">时间, 24-小时 (hh:mm:ss)</td>
</tr>
<tr>
<td align="left">%U</td>
<td align="left">周 (00-53) 星期日是一周的第一天</td>
</tr>
<tr>
<td align="left">%u</td>
<td align="left">周 (00-53) 星期一是一周的第一天</td>
</tr>
<tr>
<td align="left">%V</td>
<td align="left">周 (01-53) 星期日是一周的第一天，与 %X 使用</td>
</tr>
<tr>
<td align="left">%v</td>
<td align="left">周 (01-53) 星期一是一周的第一天，与 %x 使用</td>
</tr>
<tr>
<td align="left">%W</td>
<td align="left">星期名</td>
</tr>
<tr>
<td align="left">%w</td>
<td align="left">周的天 （0=星期日, 6=星期六）</td>
</tr>
<tr>
<td align="left">%X</td>
<td align="left">年，其中的星期日是周的第一天，4 位，与 %V 使用</td>
</tr>
<tr>
<td align="left">%x</td>
<td align="left">年，其中的星期一是周的第一天，4 位，与 %v 使用</td>
</tr>
<tr>
<td align="left">%Y</td>
<td align="left">年，4 位</td>
</tr>
<tr>
<td align="left">%y</td>
<td align="left">年，2 位</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>函数</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
